// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/trace"
)

func encodeCreateTaskResponse(response CreateTaskRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *Task:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := jx.GetEncoder()
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}
		return nil

	case *ErrorUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))

		e := jx.GetEncoder()
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}
		return nil

	case *ErrorForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		span.SetStatus(codes.Error, http.StatusText(403))

		e := jx.GetEncoder()
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}
		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeGetCurrentUserResponse(response GetCurrentUserRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CurrentUser:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := jx.GetEncoder()
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}
		return nil

	case *ErrorUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))

		e := jx.GetEncoder()
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}
		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeGetTaskResponse(response GetTaskRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *Task:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := jx.GetEncoder()
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}
		return nil

	case *ErrorUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))

		e := jx.GetEncoder()
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}
		return nil

	case *ErrorForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		span.SetStatus(codes.Error, http.StatusText(403))

		e := jx.GetEncoder()
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}
		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeGetTaskDependenciesResponse(response GetTaskDependenciesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *TaskDependencies:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := jx.GetEncoder()
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}
		return nil

	case *ErrorUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))

		e := jx.GetEncoder()
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}
		return nil

	case *ErrorForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		span.SetStatus(codes.Error, http.StatusText(403))

		e := jx.GetEncoder()
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}
		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeGetTasksParentsResponse(response GetTasksParentsRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *TaskDependencies:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := jx.GetEncoder()
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}
		return nil

	case *ErrorUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))

		e := jx.GetEncoder()
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}
		return nil

	case *ErrorForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		span.SetStatus(codes.Error, http.StatusText(403))

		e := jx.GetEncoder()
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}
		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeGetTasksParentsTreeResponse(response GetTasksParentsTreeRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *TaskRelationsList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := jx.GetEncoder()
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}
		return nil

	case *ErrorUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))

		e := jx.GetEncoder()
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}
		return nil

	case *ErrorForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		span.SetStatus(codes.Error, http.StatusText(403))

		e := jx.GetEncoder()
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}
		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeGetTodoResponse(response GetTodoRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *TaskTodo:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := jx.GetEncoder()
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}
		return nil

	case *ErrorUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))

		e := jx.GetEncoder()
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}
		return nil

	case *ErrorForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		span.SetStatus(codes.Error, http.StatusText(403))

		e := jx.GetEncoder()
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}
		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeLinkTaskResponse(response LinkTaskRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *TaskRelation:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := jx.GetEncoder()
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}
		return nil

	case *ErrorCircular:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		span.SetStatus(codes.Error, http.StatusText(400))

		e := jx.GetEncoder()
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}
		return nil

	case *ErrorUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))

		e := jx.GetEncoder()
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}
		return nil

	case *ErrorForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		span.SetStatus(codes.Error, http.StatusText(403))

		e := jx.GetEncoder()
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}
		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeLogOutResponse(response LogOutOK, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(200)
	span.SetStatus(codes.Ok, http.StatusText(200))

	return nil
}

func encodeSearchTaskResponse(response SearchTaskRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *TasksList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := jx.GetEncoder()
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}
		return nil

	case *ErrorUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))

		e := jx.GetEncoder()
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}
		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeSetTaskDoneResponse(response SetTaskDoneRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *Task:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := jx.GetEncoder()
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}
		return nil

	case *ErrorUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))

		e := jx.GetEncoder()
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}
		return nil

	case *ErrorForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		span.SetStatus(codes.Error, http.StatusText(403))

		e := jx.GetEncoder()
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}
		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeSetTaskNotDoneResponse(response SetTaskNotDoneRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *Task:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := jx.GetEncoder()
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}
		return nil

	case *ErrorUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))

		e := jx.GetEncoder()
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}
		return nil

	case *ErrorForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		span.SetStatus(codes.Error, http.StatusText(403))

		e := jx.GetEncoder()
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}
		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeSignInResponse(response SignInRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *SignInResponse:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := jx.GetEncoder()
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}
		return nil

	case *SignInWrongUsernameResponse:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		span.SetStatus(codes.Error, http.StatusText(400))

		e := jx.GetEncoder()
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}
		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeSignUpResponse(response SignUpOK, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(200)
	span.SetStatus(codes.Ok, http.StatusText(200))

	return nil
}

func encodeUnlinkTaskResponse(response UnlinkTaskRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ResponseOk:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := jx.GetEncoder()
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}
		return nil

	case *ErrorUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))

		e := jx.GetEncoder()
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}
		return nil

	case *ErrorForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		span.SetStatus(codes.Error, http.StatusText(403))

		e := jx.GetEncoder()
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}
		return nil

	case *ErrorNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		span.SetStatus(codes.Error, http.StatusText(404))

		e := jx.GetEncoder()
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}
		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeUpdateTaskResponse(response UpdateTaskRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *Task:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := jx.GetEncoder()
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}
		return nil

	case *ErrorUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))

		e := jx.GetEncoder()
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}
		return nil

	case *ErrorForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		span.SetStatus(codes.Error, http.StatusText(403))

		e := jx.GetEncoder()
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}
		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}
