// Code generated by ogen, DO NOT EDIT.

package api

// Ref: #/components/schemas/CurrentUser
type CurrentUser struct {
	Username string `json:"username"`
	Email    string `json:"email"`
	RootID   OptInt `json:"root_id"`
}

// GetUsername returns the value of Username.
func (s CurrentUser) GetUsername() string {
	return s.Username
}

// GetEmail returns the value of Email.
func (s CurrentUser) GetEmail() string {
	return s.Email
}

// GetRootID returns the value of RootID.
func (s CurrentUser) GetRootID() OptInt {
	return s.RootID
}

// SetUsername sets the value of Username.
func (s *CurrentUser) SetUsername(val string) {
	s.Username = val
}

// SetEmail sets the value of Email.
func (s *CurrentUser) SetEmail(val string) {
	s.Email = val
}

// SetRootID sets the value of RootID.
func (s *CurrentUser) SetRootID(val OptInt) {
	s.RootID = val
}

func (*CurrentUser) getCurrentUserRes() {}

// Ref: #/components/schemas/DependencyForm
type DependencyForm struct {
	DependencyTaskId int `json:"dependencyTaskId"`
}

// GetDependencyTaskId returns the value of DependencyTaskId.
func (s DependencyForm) GetDependencyTaskId() int {
	return s.DependencyTaskId
}

// SetDependencyTaskId sets the value of DependencyTaskId.
func (s *DependencyForm) SetDependencyTaskId(val int) {
	s.DependencyTaskId = val
}

// Ref: #/components/schemas/ErrorCircular
type ErrorCircular struct {
	Message string               `json:"message"`
	Code    OptErrorCircularCode `json:"code"`
}

// GetMessage returns the value of Message.
func (s ErrorCircular) GetMessage() string {
	return s.Message
}

// GetCode returns the value of Code.
func (s ErrorCircular) GetCode() OptErrorCircularCode {
	return s.Code
}

// SetMessage sets the value of Message.
func (s *ErrorCircular) SetMessage(val string) {
	s.Message = val
}

// SetCode sets the value of Code.
func (s *ErrorCircular) SetCode(val OptErrorCircularCode) {
	s.Code = val
}

func (*ErrorCircular) linkTaskRes() {}

type ErrorCircularCode string

const (
	ErrorCircularCodeCircular ErrorCircularCode = "Circular"
)

// Ref: #/components/schemas/ErrorForbidden
type ErrorForbidden struct {
	Message string                `json:"message"`
	Code    OptErrorForbiddenCode `json:"code"`
}

// GetMessage returns the value of Message.
func (s ErrorForbidden) GetMessage() string {
	return s.Message
}

// GetCode returns the value of Code.
func (s ErrorForbidden) GetCode() OptErrorForbiddenCode {
	return s.Code
}

// SetMessage sets the value of Message.
func (s *ErrorForbidden) SetMessage(val string) {
	s.Message = val
}

// SetCode sets the value of Code.
func (s *ErrorForbidden) SetCode(val OptErrorForbiddenCode) {
	s.Code = val
}

func (*ErrorForbidden) createTaskRes()          {}
func (*ErrorForbidden) getTaskDependenciesRes() {}
func (*ErrorForbidden) getTaskRes()             {}
func (*ErrorForbidden) getTasksParentsRes()     {}
func (*ErrorForbidden) getTasksParentsTreeRes() {}
func (*ErrorForbidden) getTodoRes()             {}
func (*ErrorForbidden) linkTaskRes()            {}
func (*ErrorForbidden) setTaskDoneRes()         {}
func (*ErrorForbidden) setTaskNotDoneRes()      {}
func (*ErrorForbidden) unlinkTaskRes()          {}
func (*ErrorForbidden) updateTaskRes()          {}

type ErrorForbiddenCode string

const (
	ErrorForbiddenCodeForbidden ErrorForbiddenCode = "Forbidden"
)

// Ref: #/components/schemas/ErrorNotFound
type ErrorNotFound struct {
	Message string               `json:"message"`
	Code    OptErrorNotFoundCode `json:"code"`
}

// GetMessage returns the value of Message.
func (s ErrorNotFound) GetMessage() string {
	return s.Message
}

// GetCode returns the value of Code.
func (s ErrorNotFound) GetCode() OptErrorNotFoundCode {
	return s.Code
}

// SetMessage sets the value of Message.
func (s *ErrorNotFound) SetMessage(val string) {
	s.Message = val
}

// SetCode sets the value of Code.
func (s *ErrorNotFound) SetCode(val OptErrorNotFoundCode) {
	s.Code = val
}

func (*ErrorNotFound) unlinkTaskRes() {}

type ErrorNotFoundCode string

const (
	ErrorNotFoundCodeNotFound ErrorNotFoundCode = "NotFound"
)

// Ref: #/components/schemas/ErrorUnauthorized
type ErrorUnauthorized struct {
	Message string                `json:"message"`
	Code    ErrorUnauthorizedCode `json:"code"`
}

// GetMessage returns the value of Message.
func (s ErrorUnauthorized) GetMessage() string {
	return s.Message
}

// GetCode returns the value of Code.
func (s ErrorUnauthorized) GetCode() ErrorUnauthorizedCode {
	return s.Code
}

// SetMessage sets the value of Message.
func (s *ErrorUnauthorized) SetMessage(val string) {
	s.Message = val
}

// SetCode sets the value of Code.
func (s *ErrorUnauthorized) SetCode(val ErrorUnauthorizedCode) {
	s.Code = val
}

func (*ErrorUnauthorized) createTaskRes()          {}
func (*ErrorUnauthorized) getCurrentUserRes()      {}
func (*ErrorUnauthorized) getTaskDependenciesRes() {}
func (*ErrorUnauthorized) getTaskRes()             {}
func (*ErrorUnauthorized) getTasksParentsRes()     {}
func (*ErrorUnauthorized) getTasksParentsTreeRes() {}
func (*ErrorUnauthorized) getTodoRes()             {}
func (*ErrorUnauthorized) linkTaskRes()            {}
func (*ErrorUnauthorized) searchTaskRes()          {}
func (*ErrorUnauthorized) setTaskDoneRes()         {}
func (*ErrorUnauthorized) setTaskNotDoneRes()      {}
func (*ErrorUnauthorized) unlinkTaskRes()          {}
func (*ErrorUnauthorized) updateTaskRes()          {}

type ErrorUnauthorizedCode string

const (
	ErrorUnauthorizedCodeUnauthorized ErrorUnauthorizedCode = "Unauthorized"
)

// LogOutOK is response for LogOut operation.
type LogOutOK struct{}

// Ref: #/components/schemas/NewTaskForm
type NewTaskForm struct {
	Title       string `json:"title"`
	Description string `json:"description"`
	ParentId    OptInt `json:"parentId"`
}

// GetTitle returns the value of Title.
func (s NewTaskForm) GetTitle() string {
	return s.Title
}

// GetDescription returns the value of Description.
func (s NewTaskForm) GetDescription() string {
	return s.Description
}

// GetParentId returns the value of ParentId.
func (s NewTaskForm) GetParentId() OptInt {
	return s.ParentId
}

// SetTitle sets the value of Title.
func (s *NewTaskForm) SetTitle(val string) {
	s.Title = val
}

// SetDescription sets the value of Description.
func (s *NewTaskForm) SetDescription(val string) {
	s.Description = val
}

// SetParentId sets the value of ParentId.
func (s *NewTaskForm) SetParentId(val OptInt) {
	s.ParentId = val
}

// NewOptDependencyForm returns new OptDependencyForm with value set to v.
func NewOptDependencyForm(v DependencyForm) OptDependencyForm {
	return OptDependencyForm{
		Value: v,
		Set:   true,
	}
}

// OptDependencyForm is optional DependencyForm.
type OptDependencyForm struct {
	Value DependencyForm
	Set   bool
}

// IsSet returns true if OptDependencyForm was set.
func (o OptDependencyForm) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDependencyForm) Reset() {
	var v DependencyForm
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDependencyForm) SetTo(v DependencyForm) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDependencyForm) Get() (v DependencyForm, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDependencyForm) Or(d DependencyForm) DependencyForm {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptErrorCircularCode returns new OptErrorCircularCode with value set to v.
func NewOptErrorCircularCode(v ErrorCircularCode) OptErrorCircularCode {
	return OptErrorCircularCode{
		Value: v,
		Set:   true,
	}
}

// OptErrorCircularCode is optional ErrorCircularCode.
type OptErrorCircularCode struct {
	Value ErrorCircularCode
	Set   bool
}

// IsSet returns true if OptErrorCircularCode was set.
func (o OptErrorCircularCode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptErrorCircularCode) Reset() {
	var v ErrorCircularCode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptErrorCircularCode) SetTo(v ErrorCircularCode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptErrorCircularCode) Get() (v ErrorCircularCode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptErrorCircularCode) Or(d ErrorCircularCode) ErrorCircularCode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptErrorForbiddenCode returns new OptErrorForbiddenCode with value set to v.
func NewOptErrorForbiddenCode(v ErrorForbiddenCode) OptErrorForbiddenCode {
	return OptErrorForbiddenCode{
		Value: v,
		Set:   true,
	}
}

// OptErrorForbiddenCode is optional ErrorForbiddenCode.
type OptErrorForbiddenCode struct {
	Value ErrorForbiddenCode
	Set   bool
}

// IsSet returns true if OptErrorForbiddenCode was set.
func (o OptErrorForbiddenCode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptErrorForbiddenCode) Reset() {
	var v ErrorForbiddenCode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptErrorForbiddenCode) SetTo(v ErrorForbiddenCode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptErrorForbiddenCode) Get() (v ErrorForbiddenCode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptErrorForbiddenCode) Or(d ErrorForbiddenCode) ErrorForbiddenCode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptErrorNotFoundCode returns new OptErrorNotFoundCode with value set to v.
func NewOptErrorNotFoundCode(v ErrorNotFoundCode) OptErrorNotFoundCode {
	return OptErrorNotFoundCode{
		Value: v,
		Set:   true,
	}
}

// OptErrorNotFoundCode is optional ErrorNotFoundCode.
type OptErrorNotFoundCode struct {
	Value ErrorNotFoundCode
	Set   bool
}

// IsSet returns true if OptErrorNotFoundCode was set.
func (o OptErrorNotFoundCode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptErrorNotFoundCode) Reset() {
	var v ErrorNotFoundCode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptErrorNotFoundCode) SetTo(v ErrorNotFoundCode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptErrorNotFoundCode) Get() (v ErrorNotFoundCode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptErrorNotFoundCode) Or(d ErrorNotFoundCode) ErrorNotFoundCode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNewTaskForm returns new OptNewTaskForm with value set to v.
func NewOptNewTaskForm(v NewTaskForm) OptNewTaskForm {
	return OptNewTaskForm{
		Value: v,
		Set:   true,
	}
}

// OptNewTaskForm is optional NewTaskForm.
type OptNewTaskForm struct {
	Value NewTaskForm
	Set   bool
}

// IsSet returns true if OptNewTaskForm was set.
func (o OptNewTaskForm) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNewTaskForm) Reset() {
	var v NewTaskForm
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNewTaskForm) SetTo(v NewTaskForm) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNewTaskForm) Get() (v NewTaskForm, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNewTaskForm) Or(d NewTaskForm) NewTaskForm {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSignInForm returns new OptSignInForm with value set to v.
func NewOptSignInForm(v SignInForm) OptSignInForm {
	return OptSignInForm{
		Value: v,
		Set:   true,
	}
}

// OptSignInForm is optional SignInForm.
type OptSignInForm struct {
	Value SignInForm
	Set   bool
}

// IsSet returns true if OptSignInForm was set.
func (o OptSignInForm) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSignInForm) Reset() {
	var v SignInForm
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSignInForm) SetTo(v SignInForm) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSignInForm) Get() (v SignInForm, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSignInForm) Or(d SignInForm) SignInForm {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSignInWrongUsernameResponseErrorrr returns new OptSignInWrongUsernameResponseErrorrr with value set to v.
func NewOptSignInWrongUsernameResponseErrorrr(v SignInWrongUsernameResponseErrorrr) OptSignInWrongUsernameResponseErrorrr {
	return OptSignInWrongUsernameResponseErrorrr{
		Value: v,
		Set:   true,
	}
}

// OptSignInWrongUsernameResponseErrorrr is optional SignInWrongUsernameResponseErrorrr.
type OptSignInWrongUsernameResponseErrorrr struct {
	Value SignInWrongUsernameResponseErrorrr
	Set   bool
}

// IsSet returns true if OptSignInWrongUsernameResponseErrorrr was set.
func (o OptSignInWrongUsernameResponseErrorrr) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSignInWrongUsernameResponseErrorrr) Reset() {
	var v SignInWrongUsernameResponseErrorrr
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSignInWrongUsernameResponseErrorrr) SetTo(v SignInWrongUsernameResponseErrorrr) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSignInWrongUsernameResponseErrorrr) Get() (v SignInWrongUsernameResponseErrorrr, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSignInWrongUsernameResponseErrorrr) Or(d SignInWrongUsernameResponseErrorrr) SignInWrongUsernameResponseErrorrr {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSignUpForm returns new OptSignUpForm with value set to v.
func NewOptSignUpForm(v SignUpForm) OptSignUpForm {
	return OptSignUpForm{
		Value: v,
		Set:   true,
	}
}

// OptSignUpForm is optional SignUpForm.
type OptSignUpForm struct {
	Value SignUpForm
	Set   bool
}

// IsSet returns true if OptSignUpForm was set.
func (o OptSignUpForm) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSignUpForm) Reset() {
	var v SignUpForm
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSignUpForm) SetTo(v SignUpForm) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSignUpForm) Get() (v SignUpForm, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSignUpForm) Or(d SignUpForm) SignUpForm {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTaskUpdateForm returns new OptTaskUpdateForm with value set to v.
func NewOptTaskUpdateForm(v TaskUpdateForm) OptTaskUpdateForm {
	return OptTaskUpdateForm{
		Value: v,
		Set:   true,
	}
}

// OptTaskUpdateForm is optional TaskUpdateForm.
type OptTaskUpdateForm struct {
	Value TaskUpdateForm
	Set   bool
}

// IsSet returns true if OptTaskUpdateForm was set.
func (o OptTaskUpdateForm) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTaskUpdateForm) Reset() {
	var v TaskUpdateForm
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTaskUpdateForm) SetTo(v TaskUpdateForm) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTaskUpdateForm) Get() (v TaskUpdateForm, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTaskUpdateForm) Or(d TaskUpdateForm) TaskUpdateForm {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/ResponseOk
type ResponseOk struct {
	Result OptString `json:"result"`
}

// GetResult returns the value of Result.
func (s ResponseOk) GetResult() OptString {
	return s.Result
}

// SetResult sets the value of Result.
func (s *ResponseOk) SetResult(val OptString) {
	s.Result = val
}

func (*ResponseOk) unlinkTaskRes() {}

// Ref: #/components/schemas/SignInForm
type SignInForm struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

// GetUsername returns the value of Username.
func (s SignInForm) GetUsername() string {
	return s.Username
}

// GetPassword returns the value of Password.
func (s SignInForm) GetPassword() string {
	return s.Password
}

// SetUsername sets the value of Username.
func (s *SignInForm) SetUsername(val string) {
	s.Username = val
}

// SetPassword sets the value of Password.
func (s *SignInForm) SetPassword(val string) {
	s.Password = val
}

// Ref: #/components/schemas/SignInResponse
type SignInResponse struct {
	Ok string `json:"ok"`
}

// GetOk returns the value of Ok.
func (s SignInResponse) GetOk() string {
	return s.Ok
}

// SetOk sets the value of Ok.
func (s *SignInResponse) SetOk(val string) {
	s.Ok = val
}

func (*SignInResponse) signInRes() {}

// Ref: #/components/schemas/SignInWrongUsernameResponse
type SignInWrongUsernameResponse struct {
	Errorrr OptSignInWrongUsernameResponseErrorrr `json:"errorrr"`
}

// GetErrorrr returns the value of Errorrr.
func (s SignInWrongUsernameResponse) GetErrorrr() OptSignInWrongUsernameResponseErrorrr {
	return s.Errorrr
}

// SetErrorrr sets the value of Errorrr.
func (s *SignInWrongUsernameResponse) SetErrorrr(val OptSignInWrongUsernameResponseErrorrr) {
	s.Errorrr = val
}

func (*SignInWrongUsernameResponse) signInRes() {}

type SignInWrongUsernameResponseErrorrr string

const (
	SignInWrongUsernameResponseErrorrrWrongUsername SignInWrongUsernameResponseErrorrr = "WrongUsername"
	SignInWrongUsernameResponseErrorrrOther         SignInWrongUsernameResponseErrorrr = "other"
)

// Ref: #/components/schemas/SignUpForm
type SignUpForm struct {
	Username string `json:"username"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

// GetUsername returns the value of Username.
func (s SignUpForm) GetUsername() string {
	return s.Username
}

// GetEmail returns the value of Email.
func (s SignUpForm) GetEmail() string {
	return s.Email
}

// GetPassword returns the value of Password.
func (s SignUpForm) GetPassword() string {
	return s.Password
}

// SetUsername sets the value of Username.
func (s *SignUpForm) SetUsername(val string) {
	s.Username = val
}

// SetEmail sets the value of Email.
func (s *SignUpForm) SetEmail(val string) {
	s.Email = val
}

// SetPassword sets the value of Password.
func (s *SignUpForm) SetPassword(val string) {
	s.Password = val
}

// SignUpOK is response for SignUp operation.
type SignUpOK struct{}

// Ref: #/components/schemas/Task
type Task struct {
	ID          int       `json:"id"`
	Title       string    `json:"title"`
	Description string    `json:"description"`
	Result      string    `json:"result"`
	CreatedAt   string    `json:"createdAt"`
	DoneAt      OptString `json:"doneAt"`
}

// GetID returns the value of ID.
func (s Task) GetID() int {
	return s.ID
}

// GetTitle returns the value of Title.
func (s Task) GetTitle() string {
	return s.Title
}

// GetDescription returns the value of Description.
func (s Task) GetDescription() string {
	return s.Description
}

// GetResult returns the value of Result.
func (s Task) GetResult() string {
	return s.Result
}

// GetCreatedAt returns the value of CreatedAt.
func (s Task) GetCreatedAt() string {
	return s.CreatedAt
}

// GetDoneAt returns the value of DoneAt.
func (s Task) GetDoneAt() OptString {
	return s.DoneAt
}

// SetID sets the value of ID.
func (s *Task) SetID(val int) {
	s.ID = val
}

// SetTitle sets the value of Title.
func (s *Task) SetTitle(val string) {
	s.Title = val
}

// SetDescription sets the value of Description.
func (s *Task) SetDescription(val string) {
	s.Description = val
}

// SetResult sets the value of Result.
func (s *Task) SetResult(val string) {
	s.Result = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Task) SetCreatedAt(val string) {
	s.CreatedAt = val
}

// SetDoneAt sets the value of DoneAt.
func (s *Task) SetDoneAt(val OptString) {
	s.DoneAt = val
}

func (*Task) createTaskRes()     {}
func (*Task) getTaskRes()        {}
func (*Task) setTaskDoneRes()    {}
func (*Task) setTaskNotDoneRes() {}
func (*Task) updateTaskRes()     {}

// Ref: #/components/schemas/TaskDependencies
type TaskDependencies struct {
	Dependencies []Task `json:"dependencies"`
}

// GetDependencies returns the value of Dependencies.
func (s TaskDependencies) GetDependencies() []Task {
	return s.Dependencies
}

// SetDependencies sets the value of Dependencies.
func (s *TaskDependencies) SetDependencies(val []Task) {
	s.Dependencies = val
}

func (*TaskDependencies) getTaskDependenciesRes() {}
func (*TaskDependencies) getTasksParentsRes()     {}

// Ref: #/components/schemas/TaskRelation
type TaskRelation struct {
	TaskId      int `json:"taskId"`
	DependsOnId int `json:"dependsOnId"`
}

// GetTaskId returns the value of TaskId.
func (s TaskRelation) GetTaskId() int {
	return s.TaskId
}

// GetDependsOnId returns the value of DependsOnId.
func (s TaskRelation) GetDependsOnId() int {
	return s.DependsOnId
}

// SetTaskId sets the value of TaskId.
func (s *TaskRelation) SetTaskId(val int) {
	s.TaskId = val
}

// SetDependsOnId sets the value of DependsOnId.
func (s *TaskRelation) SetDependsOnId(val int) {
	s.DependsOnId = val
}

func (*TaskRelation) linkTaskRes() {}

// Ref: #/components/schemas/TaskRelationsList
type TaskRelationsList struct {
	Dependencies []TaskRelation `json:"dependencies"`
}

// GetDependencies returns the value of Dependencies.
func (s TaskRelationsList) GetDependencies() []TaskRelation {
	return s.Dependencies
}

// SetDependencies sets the value of Dependencies.
func (s *TaskRelationsList) SetDependencies(val []TaskRelation) {
	s.Dependencies = val
}

func (*TaskRelationsList) getTasksParentsTreeRes() {}

// Ref: #/components/schemas/TaskShort
type TaskShort struct {
	ID     int       `json:"id"`
	Title  string    `json:"title"`
	DoneAt OptString `json:"doneAt"`
}

// GetID returns the value of ID.
func (s TaskShort) GetID() int {
	return s.ID
}

// GetTitle returns the value of Title.
func (s TaskShort) GetTitle() string {
	return s.Title
}

// GetDoneAt returns the value of DoneAt.
func (s TaskShort) GetDoneAt() OptString {
	return s.DoneAt
}

// SetID sets the value of ID.
func (s *TaskShort) SetID(val int) {
	s.ID = val
}

// SetTitle sets the value of Title.
func (s *TaskShort) SetTitle(val string) {
	s.Title = val
}

// SetDoneAt sets the value of DoneAt.
func (s *TaskShort) SetDoneAt(val OptString) {
	s.DoneAt = val
}

// Ref: #/components/schemas/TaskTodo
type TaskTodo struct {
	Path []TaskShort `json:"path"`
}

// GetPath returns the value of Path.
func (s TaskTodo) GetPath() []TaskShort {
	return s.Path
}

// SetPath sets the value of Path.
func (s *TaskTodo) SetPath(val []TaskShort) {
	s.Path = val
}

func (*TaskTodo) getTodoRes() {}

// Ref: #/components/schemas/TaskUpdateForm
type TaskUpdateForm struct {
	Title       OptString `json:"title"`
	Description OptString `json:"description"`
}

// GetTitle returns the value of Title.
func (s TaskUpdateForm) GetTitle() OptString {
	return s.Title
}

// GetDescription returns the value of Description.
func (s TaskUpdateForm) GetDescription() OptString {
	return s.Description
}

// SetTitle sets the value of Title.
func (s *TaskUpdateForm) SetTitle(val OptString) {
	s.Title = val
}

// SetDescription sets the value of Description.
func (s *TaskUpdateForm) SetDescription(val OptString) {
	s.Description = val
}

// Ref: #/components/schemas/TasksList
type TasksList struct {
	Tasks []Task `json:"tasks"`
}

// GetTasks returns the value of Tasks.
func (s TasksList) GetTasks() []Task {
	return s.Tasks
}

// SetTasks sets the value of Tasks.
func (s *TasksList) SetTasks(val []Task) {
	s.Tasks = val
}

func (*TasksList) searchTaskRes() {}
