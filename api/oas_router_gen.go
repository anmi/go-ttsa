// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"strings"
)

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	if prefix := s.cfg.Prefix; len(prefix) > 0 {
		if strings.HasPrefix(elem, prefix) {
			// Cut prefix from the path.
			elem = strings.TrimPrefix(elem, prefix)
		} else {
			// Prefix doesn't match.
			s.notFound(w, r)
			return
		}
	}
	if len(elem) == 0 {
		s.notFound(w, r)
		return
	}
	args := [2]string{}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'a': // Prefix: "auth/"
				if l := len("auth/"); len(elem) >= l && elem[0:l] == "auth/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 's': // Prefix: "session"
					if l := len("session"); len(elem) >= l && elem[0:l] == "session" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "DELETE":
							s.handleLogOutRequest([0]string{}, w, r)
						case "POST":
							s.handleSignInRequest([0]string{}, w, r)
						default:
							s.notAllowed(w, r, "DELETE,POST")
						}

						return
					}
				case 'u': // Prefix: "user"
					if l := len("user"); len(elem) >= l && elem[0:l] == "user" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleGetCurrentUserRequest([0]string{}, w, r)
						case "POST":
							s.handleSignUpRequest([0]string{}, w, r)
						default:
							s.notAllowed(w, r, "GET,POST")
						}

						return
					}
				}
			case 't': // Prefix: "tasks"
				if l := len("tasks"); len(elem) >= l && elem[0:l] == "tasks" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "POST":
						s.handleCreateTaskRequest([0]string{}, w, r)
					default:
						s.notAllowed(w, r, "POST")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 's': // Prefix: "search"
						if l := len("search"); len(elem) >= l && elem[0:l] == "search" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleSearchTaskRequest([0]string{}, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
					}
					// Param: "id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleGetTaskRequest([1]string{
								args[0],
							}, w, r)
						case "PUT":
							s.handleUpdateTaskRequest([1]string{
								args[0],
							}, w, r)
						default:
							s.notAllowed(w, r, "GET,PUT")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'd': // Prefix: "d"
							if l := len("d"); len(elem) >= l && elem[0:l] == "d" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'e': // Prefix: "ependencies"
								if l := len("ependencies"); len(elem) >= l && elem[0:l] == "ependencies" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "GET":
										s.handleGetTaskDependenciesRequest([1]string{
											args[0],
										}, w, r)
									case "POST":
										s.handleLinkTaskRequest([1]string{
											args[0],
										}, w, r)
									default:
										s.notAllowed(w, r, "GET,POST")
									}

									return
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "depends_on_id"
									// Leaf parameter
									args[1] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "DELETE":
											s.handleUnlinkTaskRequest([2]string{
												args[0],
												args[1],
											}, w, r)
										default:
											s.notAllowed(w, r, "DELETE")
										}

										return
									}
								}
							case 'o': // Prefix: "one"
								if l := len("one"); len(elem) >= l && elem[0:l] == "one" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "DELETE":
										s.handleSetTaskNotDoneRequest([1]string{
											args[0],
										}, w, r)
									case "PUT":
										s.handleSetTaskDoneRequest([1]string{
											args[0],
										}, w, r)
									default:
										s.notAllowed(w, r, "DELETE,PUT")
									}

									return
								}
							}
						case 'p': // Prefix: "parents"
							if l := len("parents"); len(elem) >= l && elem[0:l] == "parents" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch r.Method {
								case "GET":
									s.handleGetTasksParentsRequest([1]string{
										args[0],
									}, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
							switch elem[0] {
							case '-': // Prefix: "-tree"
								if l := len("-tree"); len(elem) >= l && elem[0:l] == "-tree" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleGetTasksParentsTreeRequest([1]string{
											args[0],
										}, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
							}
						case 't': // Prefix: "todo"
							if l := len("todo"); len(elem) >= l && elem[0:l] == "todo" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetTodoRequest([1]string{
										args[0],
									}, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
						}
					}
				}
			}
		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name        string
	operationID string
	count       int
	args        [2]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r Route) Name() string {
	return r.name
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.operationID
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
func (s *Server) FindRoute(method, path string) (r Route, _ bool) {
	var (
		args = [2]string{}
		elem = path
	)
	r.args = args
	if elem == "" {
		return r, false
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'a': // Prefix: "auth/"
				if l := len("auth/"); len(elem) >= l && elem[0:l] == "auth/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 's': // Prefix: "session"
					if l := len("session"); len(elem) >= l && elem[0:l] == "session" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "DELETE":
							// Leaf: LogOut
							r.name = "LogOut"
							r.operationID = "logOut"
							r.args = args
							r.count = 0
							return r, true
						case "POST":
							// Leaf: SignIn
							r.name = "SignIn"
							r.operationID = "signIn"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
				case 'u': // Prefix: "user"
					if l := len("user"); len(elem) >= l && elem[0:l] == "user" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							// Leaf: GetCurrentUser
							r.name = "GetCurrentUser"
							r.operationID = "getCurrentUser"
							r.args = args
							r.count = 0
							return r, true
						case "POST":
							// Leaf: SignUp
							r.name = "SignUp"
							r.operationID = "signUp"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
				}
			case 't': // Prefix: "tasks"
				if l := len("tasks"); len(elem) >= l && elem[0:l] == "tasks" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "POST":
						r.name = "CreateTask"
						r.operationID = "createTask"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 's': // Prefix: "search"
						if l := len("search"); len(elem) >= l && elem[0:l] == "search" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								// Leaf: SearchTask
								r.name = "SearchTask"
								r.operationID = "searchTask"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
					}
					// Param: "id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "GetTask"
							r.operationID = "getTask"
							r.args = args
							r.count = 1
							return r, true
						case "PUT":
							r.name = "UpdateTask"
							r.operationID = "updateTask"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'd': // Prefix: "d"
							if l := len("d"); len(elem) >= l && elem[0:l] == "d" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'e': // Prefix: "ependencies"
								if l := len("ependencies"); len(elem) >= l && elem[0:l] == "ependencies" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										r.name = "GetTaskDependencies"
										r.operationID = "getTaskDependencies"
										r.args = args
										r.count = 1
										return r, true
									case "POST":
										r.name = "LinkTask"
										r.operationID = "linkTask"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "depends_on_id"
									// Leaf parameter
									args[1] = elem
									elem = ""

									if len(elem) == 0 {
										switch method {
										case "DELETE":
											// Leaf: UnlinkTask
											r.name = "UnlinkTask"
											r.operationID = "unlinkTask"
											r.args = args
											r.count = 2
											return r, true
										default:
											return
										}
									}
								}
							case 'o': // Prefix: "one"
								if l := len("one"); len(elem) >= l && elem[0:l] == "one" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "DELETE":
										// Leaf: SetTaskNotDone
										r.name = "SetTaskNotDone"
										r.operationID = "setTaskNotDone"
										r.args = args
										r.count = 1
										return r, true
									case "PUT":
										// Leaf: SetTaskDone
										r.name = "SetTaskDone"
										r.operationID = "setTaskDone"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
							}
						case 'p': // Prefix: "parents"
							if l := len("parents"); len(elem) >= l && elem[0:l] == "parents" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									r.name = "GetTasksParents"
									r.operationID = "getTasksParents"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '-': // Prefix: "-tree"
								if l := len("-tree"); len(elem) >= l && elem[0:l] == "-tree" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										// Leaf: GetTasksParentsTree
										r.name = "GetTasksParentsTree"
										r.operationID = "getTasksParentsTree"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
							}
						case 't': // Prefix: "todo"
							if l := len("todo"); len(elem) >= l && elem[0:l] == "todo" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									// Leaf: GetTodo
									r.name = "GetTodo"
									r.operationID = "getTodo"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
						}
					}
				}
			}
		}
	}
	return r, false
}
